export class ChatMessage {

    /**
     * The role of the message sender: user or assistant
     */
    public role: string;

    /**
     * The message text
     */
    public content: string;

    /**
     * Filter to ignore the message in OpenAI request.
     * Default is false - all messages are sent to OpenAI.
     */
    public ignored: boolean = false;

    constructor(role: string, content: string) {
        this.role = role;
        this.content = content;
    }
}

export enum CellValue {
    Yes = 'Yes',
    No = 'No',
    Any = 'any'
}

export enum DataItemType {
    String = 'string',
    Number = 'number',
    Boolean = 'boolean',
}

export class DataItem {

    /**
     * The unique identifier of the data item
     */
    field: string;

    /**
     * The question or clarification to understand the data item
     */
    label: string;

    /**
     * Enumeration of possible values, usually for boolean data items
     */
    enumeration: string[] = null;

    /**
     * The type of the data item
     */
    type: DataItemType = DataItemType.String;

    /**
     * The value collected from the user
     */
    value: string = null;

    /**
     * Optional grouping of data items
     */
    category: string = null;

    constructor(field: string, label: string) {
        this.field = field;
        this.label = label;
    }

    static empty(field: string, label: string): DataItem {
        return new DataItem(field, label);
    }

    static emptyBoolean(field: string, label: string): DataItem {
        const result = new DataItem(field, label);
        result.type = DataItemType.Boolean;
        return result;
    }

    static text(field: string, label: string, value: string): DataItem {
        const result = new DataItem(field, label);
        result.value = value;
        return result;
    }

    static boolean(field: string, label: string, value: boolean): DataItem {
        const result = new DataItem(field, label);
        result.type = DataItemType.Boolean;
        result.value = value ? "true" : "false";
        return result;
    }

    toDebugString(): string {
        return `${this.field} (${this.label}) = ${this.value}`;
    }
}

export class AgentRequest {

    /**
     * If true, the request is a mock request for testing purposes
     */
    public isMock: boolean = false;

    /**
     * The error produced by the server
     */
    public errorMessage: string = null;

    /**
     * Existing messages in the chat
     */
    public messages: ChatMessage[] = [];

    /**
     * The data collected from the user
     */
    public userData: DataItem[] = [];

    /**
     * The symptoms collected from the user
     */
    public symptomsData: DataItem[] = [];

    /**
     * The next message to be displayed to the user.
     * It is not appended to the messages array
     */
    public nextMessage: ChatMessage = null;

    /**
     * The voucher id generated by the server if all data is collected.
     * This is the last message sent to the user.
     */
    public voucherId: string = null;

    static fromJson(json: any): AgentRequest {
        return Object.assign(new AgentRequest(), json);
    }
}

export class AgentResponse {
    /**
     * The message to be displayed to the user
     */
    readonly message: string = null;

    /**
     * If true, the voucher id is generated and sent to the user
     */
    readonly printVoucher: boolean = false;

    /**
     * The technical error produced by the server
     */
    readonly systemError = null;

    constructor(message: string, printVoucher: boolean, systemError = null) {
        this.message = message;
        this.printVoucher = printVoucher;
        this.systemError = systemError;
    }

    static message(message: string) {
        return new AgentResponse(message, false);
    }

    static printVoucher(message: string) {
        return new AgentResponse(message, true);
    }

    static systemError(message: string, systemError: string) {
        return new AgentResponse(message, false, systemError);
    }
}
