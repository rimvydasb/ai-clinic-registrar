export class ChatMessage {

    public role: string;
    public content: string;
    public ignored: boolean = false;

    constructor(role: string, content: string) {
        this.role = role;
        this.content = content;
    }
}

export enum CellValue {
    Yes = 'Yes',
    No = 'No',
    Any = 'any'
}

export enum DataItemType {
    String = 'string',
    Number = 'number',
    Boolean = 'boolean',
}

export class DataItem {
    constructor(
        public field: string,
        public label: string,
        public enumeration: string[] = null,
        public type: DataItemType = DataItemType.String,
        public value: string | null = null
    ) {
    }

    static countValues(items: DataItem[], value: string): number {
        return items
            .filter(item => item.value !== null)
            .filter(item => item.value.toLowerCase() === value.toLowerCase())
            .length;
    }

    public toProperty() {
        let property = {};

        if (this.type == DataItemType.Boolean) {
            property = {
                "type": "string",
                "enum": ["yes", "no", "unknown"],
                "description": this.label
            }
        } else {
            property = {
                "type": this.type.toString(),
                "description": this.label
            }

            if (this.enumeration) {
                property["enum"] = this.enumeration;
            }
        }

        return property;
    }
}

export class AgentRequest {

    /**
     * If true, the request is a mock request for testing purposes
     */
    public isMock: boolean = false;

    /**
     * The error produced by the server
     */
    public errorMessage: string = null;

    /**
     * Existing messages in the chat
     */
    public messages: ChatMessage[] = [];

    /**
     * The data collected from the user
     */
    public userData: DataItem[] = [];

    /**
     * The symptoms collected from the user
     */
    public symptomsData: DataItem[] = [];

    /**
     * The next message to be displayed to the user.
     * It is not appended to the messages array
     */
    public nextMessage: ChatMessage = null;

    /**
     * The voucher id generated by the server if all data is collected.
     * This is the last message sent to the user.
     */
    public voucherId: string = null;

    static fromJson(json: any): AgentRequest {
        return Object.assign(new AgentRequest(), json);
    }
}
